generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  username    String
  password    String
  fullName    String?
  email       String        @unique
  phoneNumber String?
  address     String?
  userType    UserType?      @default(BOTH)
  createdAt   DateTime      @default(now())
  modes       Mode[]
  rentals     Reservation[] @relation("RenterReservations")
  payments    Payment[]
}

model Location {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  state      String
  country    String
  postalCode String
  createdAt  DateTime @default(now())
  modes      Mode[]
}

model Mode {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  ownerId      String        @map("ownerId") @db.ObjectId
  owner        User          @relation(fields: [ownerId], references: [id])
  type         ModeType
  make         String
  model        String
  year         Int
  color        String?
  licensePlate String?
  vin          String?
  locationId   String        @map("locationId") @db.ObjectId
  location     Location      @relation(fields: [locationId], references: [id])
  pricePerDay  Float
  status       ModeStatus
  description  String?
  createdAt    DateTime      @default(now())
  reservations Reservation[]
}

model Reservation {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId String            @map("vehicleId") @db.ObjectId
  vehicle   Mode              @relation(fields: [vehicleId], references: [id])
  renterId  String            @map("rentalId") @db.ObjectId
  renter    User              @relation("RenterReservations", fields: [renterId], references: [id])
  startDate DateTime
  endDate   DateTime
  totalCost Float
  status    ReservationStatus
  createdAt DateTime          @default(now())
  payments  Payment[]
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  rentalId      String        @map("rentalId") @db.ObjectId
  rental        Reservation   @relation(fields: [rentalId], references: [id])
  amount        Float
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  status        PaymentStatus
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?       @db.ObjectId
}

enum UserType {
  RENTER
  OWNER
  BOTH
}

enum ReservationStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ModeType {
  CAR
  BIKE
  EBIKE
}

enum ModeStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum PaymentMethod {
  CREDITCARD
  DEBITCARD
  PAYPAL
  BANKTRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
